<?php // -*- php -*-
  // FIXME use libraries module
// Add locally bundled libraries to include path, and include them.
$eltmc_googlesync_module_libs = DRUPAL_ROOT .'/'. drupal_get_path('module', 'eltmc_googlesync') .'/libraries';
if (FALSE == strpos(ini_get('include_path'), $eltmc_googlesync_module_libs)) {
    if (!ini_set('include_path', ini_get('include_path') . ":$eltmc_googlesync_module_libs")) {
        watchdog('eltmc_googlesync', "<p>Failed to change ini path to include Zend library</p>");
    }
}
require_once "Zend/Loader.php";

function _eltmc_googlesync_config() {
    global $base_url;

    Zend_Loader::loadClass('Zend_Oauth');
    
    $oauth_domain = variable_get('eltmc_googlesync_domain');
    $oauth_consumerkey = variable_get('eltmc_googlesync_consumerkey');
    $oauth_consumersecret = variable_get('eltmc_googlesync_consumersecret');
    if (!isset($oauth_domain) || !isset($oauth_consumersecret) || !isset($oauth_consumerkey))
        return null;

    // Note, alias and users access required to check if any aliases or user accounts are using
    // the emails we'd otherwise assign to a group.
    $oauth_scopes = array("https://apps-apis.google.com/a/feeds/groups/",
                          "https://apps-apis.google.com/a/feeds/user/",
                          "https://apps-apis.google.com/a/feeds/alias/");
    
    $oauth_config = array(
        'requestScheme' => Zend_Oauth::REQUEST_SCHEME_HEADER,
        'version' => '1.0',
        'signatureMethod' => 'HMAC-SHA1',
        'callbackUrl' => "$base_url/admin/config/services/eltmc_googlesync",
        'requestTokenUrl' => 'https://www.google.com/accounts/OAuthGetRequestToken',
        'userAuthorizationUrl' => 'https://www.google.com/accounts/OAuthAuthorizeToken',
        'accessTokenUrl' => 'https://www.google.com/accounts/OAuthGetAccessToken',
        'consumerKey' => $oauth_consumerkey,
        'consumerSecret' => $oauth_consumersecret,
        );

    return array(
        'oauth_config' => $oauth_config,
        'scopes' => $oauth_scopes,
        'domain' => $oauth_domain
        );
}


function _eltmc_googlesync_get_email_name($email) {
    $name = preg_match('/^(.*)@/', $email, $matches);
    return $matches[1];
}

function _eltmc_googlesync_endswith($string, $test) {
    $strlen = strlen($string);
    $testlen = strlen($test);
    if ($testlen > $strlen) return false;
    return substr_compare($string, $test, -$testlen) === 0;
}


/**
 * Implements hook_menu
 */
function eltmc_googlesync_menu() {
    
    $items = array();
    
    $items['admin/config/services/eltmc_googlesync'] = array(
        'title' => 'ELTMC Google Sync module settings',
        'description' => 'Configure synchronisation',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('eltmc_googlesync_admin_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
        );
    
    return $items;
}

/**
 * Define the configuration form
 */
function eltmc_googlesync_admin_form() {

    $access_token = variable_get('eltmc_googlesync_access_token');
    if ($access_token) {
        Zend_Loader::loadClass('Zend_Oauth_Token_Access');
        $access_token = unserialize($access_token)->getToken();
        $access_token_note = t("An access token is currently set (public key: %token).",
			       array('%token' => $access_token));
    }
    else {
        $access_token_note = t('An access token is currently <i>not</i> set.');
    }

    $form = array(
      'eltmc_googlesync_manage_domains' => array(
          '#markup' => t("Before configuring this module, you will need to create a Google Apps ".
                         "domain, which at the time of writing are unfortunatly no longer free ".
                         "(see <a href='http://support.google.com/a/bin/answer.py?hl=en&answer=2855120'>".
                         "here</a> for some more information).  You then need to add it to your ".
                         "managed domains at <a href='https://accounts.google.com/ManageDomains'>".
                         "https://accounts.google.com/ManageDomains</a>, and follow the steps to ".
                         "obtain a Consumer Secret and Consumer Key."),
          ),
      'eltmc_googlesync_domain' => array(
          '#type' => 'textfield',
          '#title' => t('Google Apps domain name'),
          '#default_value' => variable_get('eltmc_googlesync_domain', ''),
          '#size' => 50,
          '#maxlength' => 100,
          '#description' => t("The name of your Google Apps domain"),
          '#required' => TRUE,
          ),
      'eltmc_googlesync_consumerkey' => array(
          '#type' => 'textfield',
          '#title' => t('Google Apps Consumer Key'),
          '#default_value' => variable_get('eltmc_googlesync_consumerkey', ''),
          '#size' => 50,
          '#maxlength' => 100,
          '#description' => t("The 'OAuth Consumer Key' obtained from Google Apps."),
          '#required' => TRUE,
          ),
      'eltmc_googlesync_consumersecret' => array(
          '#type' => 'textfield',
          '#title' => t('Google Apps Consumer Secret'),
          '#default_value' => variable_get('eltmc_googlesync_consumersecret', ''),
          '#size' => 50,
          '#maxlength' => 100,
          '#description' => t("The 'OAuth Consumer Secret' obtained from Google Apps."),
          '#required' => TRUE,
          ),
      'eltmc_googlesync_groups_admin' => array(
          '#type' => 'textfield',
          '#title' => t('The groups admin email address.'),
          '#default_value' => variable_get('eltmc_googlesync_groups_admin', ''),
          '#size' => 50,
          '#maxlength' => 100,
          '#description' => t("If set, all groups will have this email address set as owner."),
          '#required' => FALSE,
          ),
      'eltmc_googlesync_dryrun' => array(
          '#type' => 'checkbox',
          '#title' => t("Dry-run mode."),
          '#default_value' => variable_get('eltmc_googlesync_dryrun', true),
          '#description' => t("If checked, the module's action, when executed, won't actually modify the groups, just log what it would have done"),
          '#required' => FALSE,
          ),      
      'eltmc_googlesync_action_note' => array(
          '#markup' => "<p>You can bind the <i>eltmc_googlesync_sync_groups_to_committee_action</i> ".
	  "to a trigger <a href='/admin/config/system/actions'>here</a>, ".
	  "or if the <a href='http://drupal.org/project/rules'>Rules</a> module is installed, ".
	  "probably more flexibly use that instead.</p>"
          ),
      'eltmc_googlesync_access_token_note' => array(
          '#markup' => "<p>$access_token_note <b>Clicking 'Save' will refresh the authorization token.</b></p>"
          ),
      );

// FIXME add help explaining how to get the secret etc.

  return system_settings_form($form);
}

/**
 * performs a redirect on submission of the config settings form
 * http://drupal.stackexchange.com/questions/33658/how-to-redirect-according-to-url-parameter-after-form-submission
 */
function eltmc_googlesync_form_alter(&$form, $form_state, $form_id) {
    if ($form_id != 'eltmc_googlesync_admin_form')
        return;

    ## Add our handler to the default submit handlers
    $form['#submit'][] = 'eltmc_googlesync_request_access_token';

    // Bind the 'Save' submit button to this handler, which re-uses the default #submit handlers,
    // and add an 'Update' button to trigger the action manually.
    $form['actions'] = array(
	'#type' => 'actions',
	'save' => array(
	    '#type' => 'submit',
	    '#value' => 'Save and Refresh Token',
	    '#submit' => $form['#submit'],
	    ),
	'update' => array(
	    '#type' => 'submit',
	    '#value' => 'Update Google Now',
	    '#submit' => array('eltmc_googlesync_update_google_handler'),
	    ),
	);

    // Clear the default handler on the form itself.
    unset($form['#submit']);


    // If we appear to have returned to the form with an access token, attempt to
    // obtain it and save it.
    Zend_Loader::loadClass('Zend_Oauth_Token');
    if (isset($_GET[Zend_Oauth_Token::TOKEN_PARAM_KEY])) {
        if (isset($_SESSION['GOOGLE_REQUEST_TOKEN'])) {
            Zend_Loader::loadClass('Zend_Oauth_Consumer');
            $config = _eltmc_googlesync_config();
            if (!$config) {
		watchdog('eltmc_googlesync', "<p>Not yet configured, skipping access token transaction</p>");
                return;
            }
            
            $rtoken = unserialize($_SESSION['GOOGLE_REQUEST_TOKEN']);
//            dpm("got request ". $_SESSION['GOOGLE_REQUEST_TOKEN']); // DEBUG

	    try {
		$consumer = new Zend_Oauth_Consumer($config['oauth_config']);

		$atoken = $consumer->getAccessToken($_GET, $rtoken);
	    }
	    catch(Excption $ex) {
		$message = t("<p>Error getting OAuth access token from URL parameters, aborting transaction. Exception was</p><pre>%exception</pre> ",
			     array('%exception' => $ex));
		watchdog('eltmc_googlesync', $message);
		drupal_set_message($message, 'error');
		return;
	    }
            
            variable_set('eltmc_googlesync_access_token', serialize($atoken));
            
            // Now that we have an Access Token, we can discard the Request Token
            $_SESSION['GOOGLE_REQUEST_TOKEN'] = null;
        }
        else {
	    watchdog('eltmc_googlesync',
		     "<p>Invalid callback request from %referrer, '%param' parameter ".
		     "was set but <b>GOOGLE_REQUEST_TOKEN</b> cookie was not. ".
		     "This may happen when clicking 'Update' after saving and refreshing ".
		     "the authorisation token, or (just possibly) it might be some ".
		     "sort of monkey business. Ignoring in any case.</p>",
		     array('%param' => Zend_Oauth_Token::TOKEN_PARAM_KEY,
			   '%referrer' => $_SERVER['HTTP_REFERER']));

	    // Note, what I'd really like to do to to get rid of this
	    // case is to get Drupal to redirect to the same URL minus
	    // the GET parameters after Google redirects back to it
	    // with the authorization token encoded in the URL query.
	    // Unfortunately I don't currently know of a way to do
	    // that.
	    //
	    // (Apparently Google's redirect has to be a GET because a
	    // redirect can't be anything else).
	    return;
        }
    }
}


function eltmc_googlesync_request_access_token(&$form, &$form_state) {

    Zend_Loader::loadClass('Zend_Oauth_Consumer');
    $config = _eltmc_googlesync_config();
    if (!$config) {
	watchdog('eltmc_googlesync', "<p>Not yet configured, skipping access token transaction</p>");
        return;
    }

    // Prepare for another request by fetching a request token, then
    // redirect to Google to perform the request.  We need to catch
    // errors from Zend_Oauth_Exception.
    try {
	$consumer = new Zend_Oauth_Consumer($config['oauth_config']);
        $token = $consumer->getRequestToken(array('scope' => implode(' ', $config['scopes'])));

        // Persist the token in the session
        $_SESSION['GOOGLE_REQUEST_TOKEN'] = serialize($token);
        
        // Set the form to redirect the user to Google with a request
        // token on submission.
        // See http://drupal.org/node/134000#comment-5638958
        $url = $consumer->getRedirectUrl(array('hd' => $config['domain']));

	if (!isset($url)) {
	    throw new Exception("no redirection URL returned by OAuth token request");
	}

	$form_state['redirect'] = array(
	    $url,
	    array('external' => TRUE)
	    );
	return $url;
    }
    catch(Zend_Oauth_Exception $ex) {
	$message = t("<p>Failed to get request token:</p><pre>%exception</pre>",
		     array('%exception' => $ex));
	watchdog('eltmc_googlesync', $message);
	drupal_set_message($message, 'error');
    }
}



/**
 * Implements hook_action_info().
 */
function eltmc_googlesync_action_info() {
    return array(
        'eltmc_googlesync_sync_groups_to_committee_action' => array(
            'label' => t('Synchronise the Google App domain email groups with the current committee occupants.'),
            'type' => 'system',
            'configurable' => FALSE,
            'triggers' => array('any'),
            ),
        );
} 


/**
 * Find users with a given role.
 * Adapted from http://drupal.stackexchange.com/questions/11175/get-all-users-with-specific-roles-using-entityfieldquery
 *
 * @param $role mixed The name or rid of the role we're wanting users to have
 * @param $active_user boolean Only return active accounts?
 *
 * @return array An array of user objects with the role
 */
function _eltmc_googlesync_uids_with_role($role, $active_user = TRUE) {
    $uids = array();
    $users = array();
    if (is_int($role)) {
        $my_rid = $role;
    }
    else {
        $role = user_role_load_by_name($role);
        $my_rid = $role->rid;
    }
    $result = db_select('users_roles', 'ur')
    ->fields('ur', array('uid'))
    ->condition('ur.rid', $my_rid, '=')
    ->execute();

    return $result->fetchCol();
}



/** 
 * Find all committee_role nodes, and append them to the $groups hash,
 * adding a recipient email for both $groups_admin_address, and all
 * of the addresses listed in the field_copy_emails_to field.
 *
 * @param array $group_admin_addresses An array of recipients all the groups should send to.
 * @return array An array mapping committee_role emails to recipient email addresses.
 */
function _eltmc_googlesync_create_recipient_map($group_admin_addresses) {
    $groups = array();

    // Get all the committee_role nodes
    $query = new EntityFieldQuery();
    $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'committee_role');


    $result = $query->execute();

    if (!isset($result['node'])) {
	return null;
    }

    $roles_nids = array_keys($result['node']);
    $roles = entity_load('node', $roles_nids);

    // For each committee_role
    foreach($roles as $role) {

	// Get the role's email address
	$items = field_get_items('node', $role, 'field_email_address');
	if (!$items || count($items) == 0) continue;

	// Mark the $groups_admin_address as a recipient
	$email_address = strtolower($items[0]['email']);

	foreach($group_admin_addresses as $admin_address) {
	    $groups[$email_address][$admin_address] = true;
	}
	
	// Get all the CC To field addresses
	$items = field_get_items('node', $role, 'field_copy_emails_to');
	if (!$items) continue;

	foreach($items as $cc_address) {
	    // Add this CC To address as another recipient
	    $groups[$email_address][strtolower($cc_address['email'])] = true;
	}
    }
    return $groups;
}




/**
 * Log in using $username, $password, into Google apps domain $domain.
 * If fails, throws a Zend_Gdata_App_AuthException .
 * If it succeeds, it returns a Zend_Gdata_Gapps instance.
 * Currently not used.
 */
function _eltmc_googlesync_get_client_login_client($username, $domain, $password) {
    Zend_Loader::loadClass('Zend_Gdata_ClientLogin');
    Zend_Loader::loadClass('Zend_Gdata_Gapps');

    // Try to login. If login fails, log the user out and display an
    // error message.
    $service = Zend_Gdata_Gapps::AUTH_SERVICE_NAME;
    $client = Zend_Gdata_ClientLogin::getHttpClient("$username@$domain", $password, $service);
    $gapps = new Zend_Gdata_Gapps($client, $domain);
    return $gapps;
}

/**
 * Generate a client instance using a serialised access token stored in $token_file
 * and the configuration $config (describe this).
 * If fails, throws a (Zend_Gdata_App_AuthException?).
 * If it succeeds, it returns a Zend_Gdata_Gapps instance.
 */
function _eltmc_googlesync_oauth_client($config) {
    Zend_Loader::loadClass('Zend_Oauth_Token_Access');
    Zend_Loader::loadClass('Zend_Gdata_Gapps');

    $token = unserialize(variable_get('eltmc_googlesync_access_token'));

    $client = $token->getHttpClient($config['oauth_config']);
    $gapps = new Zend_Gdata_Gapps($client, $config['domain']);
    return $gapps;
}


/**
 * This implements the action which perform the synchronisation.
 * Essentially it just invokes the function which does the job and logs the result.
 */
function eltmc_googlesync_sync_groups_to_committee_action() {
    $message = eltmc_googlesync_sync_groups_to_committee();
    watchdog('eltmc_googlesync', $message);
}

/** 
 * This method is a form handler which will invoke the sync action and show the output
 * as well as log it.
 */
function eltmc_googlesync_update_google_handler(&$form, &$form_state) {

    $message = eltmc_googlesync_sync_groups_to_committee();
    watchdog('eltmc_googlesync', $message);
    drupal_set_message($message, 'status');
}


/**
 * This actually performs the synchronisation
 */
function eltmc_googlesync_sync_groups_to_committee() {
    Zend_Loader::loadClass('Zend_Gdata');

    $config = _eltmc_googlesync_config();
    if (!$config) {
	watchdog('eltmc_googlesync', "<p>Not yet configured, skipping group sync</p>");
        return;
    }

    $gapps = _eltmc_googlesync_oauth_client($config);
    $domain = strtolower(variable_get('eltmc_googlesync_domain', ''));
    
    // Create an array $group_admins whose keys are the group admin(s).
    // For now, we just allow a single (optional) shared group admin.
    $groups_admin = strtolower(variable_get('eltmc_googlesync_groups_admin', ''));
    $group_admins = array();
    if ($groups_admin) $group_admins[$groups_admin] = true;

    $groups = _eltmc_googlesync_create_recipient_map(array_keys($group_admins));


    // Get the Committee's UIDs 
    $uids = _eltmc_googlesync_uids_with_role('committee');
    $errors = array();

    // Add their email addresses and comittee roles into the hash-of-hashes $groups
    foreach ($uids as $uid) {
        $user = user_load($uid);
        $profile = profile2_load_by_user($uid, 'committee_profile');
        if (!$profile) continue;
        
        $items = field_get_items('profile2', $profile, 'field_committee_roles');
        if (!$items) continue;

        foreach($items as $c_role) {
            $node = node_load($c_role['target_id']);
            $items2 = field_get_items('node', $node, 'field_email_address');
            if (!$items2) continue;

            $group_name  = $long_group_name = strtolower($items2[0]['email']);
            $groups[$group_name][strtolower($user->mail)] = true;

	    // FIXME we should probably check the domain of the group email is our domain
	    if (!_eltmc_googlesync_endswith($group_name, "@$domain")) {
		$errors[] = "<li>Group $group_name does not end with your Google Apps domain!</li>";
	    }
        }
    }

    if (count($errors) > 0) {
	$message = t("<p>Update of Google group emails aborted because of problems detected:</p><ul>!errors</ul>",
		     array('!errors' => implode($errors, "\n")));
	return $message;
    }	


    // Get the user accounts and aliases
    // These require extra acccess rights, hence the aliases and users scopes added
    // to the oauth request above.
    $gapps_emails = array();
    $gapps_user_list = $gapps->retrieveAllUsers();
    foreach ($gapps_user_list as $user) {
        $addr = strtolower($user->login->username);
        $gapps_emails["$addr@$domain"] = $addr;
    }
    $gapps_alias_list = $gapps->retrieveAllNicknames();
    foreach ($gapps_alias_list as $alias) {
        $addr = strtolower($alias->nickname->name);
        $gapps_emails["$addr@$domain"] = $addr;
    }

    // Get the groups and membership information from Google Apps into a hash of hashes $gapps_groups
    $gapps_group_list = $gapps->retrieveAllGroups();
    $gapps_groups = array();
    foreach($gapps_group_list->entry as $group) {
        $group_id = '';
        foreach($group->property as $prop) {
            switch ($prop->name) {
            case 'groupId':
                $group_id = strtolower($prop->value);
                $gapps_groups[$group_id] = array();
                break;
            }
        }

        $member_list = $gapps->retrieveAllMembers($group_id);
        //dpm("group id $group_id: ".print_r($member_list, true)); // DEBUG
        foreach($member_list as $member) {
            $member_email = '';
            foreach($member->property as $prop) {
                switch ($prop->name) {
                case 'memberId':
                    $member_email = strtolower($prop->value);
                    $gapps_groups[$group_id][$member_email] = true;
                    break;
                }
            }
        }
    }
//    dpm(print_r($gapps_groups, true)); // DEBUG

//    dpm(print_r($groups, true)); // DEBUG
    $dryrun = variable_get('eltmc_googlesync_dryrun');

    $delta = array();

    // Add any new groups/memberships into Google
    foreach ($groups as $group => $users) {

        // Skip groups which have the same name as a user account
        // (we can't define a group for those)
        if (array_key_exists($group, $gapps_emails)) {
            $delta[$group]['MODIFICATION'] = 'not created as it is in use by a user account or alias';
            continue;
        }

	$group_name = _eltmc_googlesync_get_email_name($group);

        if (!array_key_exists($group, $gapps_groups)) {
            $delta[$group]['MODIFICATION'] = 'created';
            $gapps_groups[$group] = array();
	    try {
		if (!$dryrun) $gapps->createGroup($group_name, ucfirst($group_name), '', 'Anyone');
	    }
	    catch (Exception $ex) {
		$delta[$group]['MODIFICATION'] .= " - failed: ".$ex->getMessage();
	    }
        }

        foreach ($users as $user => $ignored) {
            if (array_key_exists($user, $gapps_groups[$group]))
                continue;

            if (!array_key_exists($group, $delta) || !array_key_exists('MODIFICATION', $delta[$group]))
                $delta[$group]['MODIFICATION'] = 'modified';

	    try {
		// If the user is in the $groups_admin array, make them an owner
		if (array_key_exists($user, $group_admins)) {
		    $delta[$group][$user] = 'added as an owner';
		
		    if (!$dryrun) $gapps->addOwnerToGroup($user, $group_name);
		}
		else {
		    // Just make them a normal member
		    $delta[$group][$user] = 'added as a member';
		    
		    if (!$dryrun) $gapps->addMemberToGroup($user, $group_name);
//                  if (!$dryrun) $gapps->addRecipientToEmailList($user, $group_name);
		}
	    }
	    catch (Exception $ex) {
		$delta[$group][$user] .= " - failed: ".$ex->getMessage();
	    }
        }
    }

    // Delete groups/memberships which no longer exist from Google
    foreach ($gapps_groups as $group => $users) {

        // Skip groups which have the same name as a user account
        // (we can't delete a group for those)
        if (array_key_exists($group, $gapps_emails)) {
            $delta[$group]['MODIFICATION'] = 'not deleted as it is in use by a user account or alias';
            continue;
        }

	$group_name = _eltmc_googlesync_get_email_name($group);

	if (!array_key_exists($group, $groups)) {
	    $delta[$group]['MODIFICATION'] = 'removed';

	    try {
		if (!$dryrun) $gapps->deleteGroup($group_name);
	    }
	    catch (Exception $ex) {
		$delta[$group]['MODIFICATION'] .= " - failed: ".$ex->getMessage();
	    }

	    continue;
	}

        foreach ($users as $user => $ignored) {
	    try {
		if (!array_key_exists($user, $groups[$group])) {            
		    $delta[$group][$user] = 'removed';
		    
		    if (!$dryrun) $gapps->removeMemberFromGroup($user, $group_name);
		}
		elseif (array_key_exists($user, $group_admins) && !$gapps->isOwner($user, $group_name)) {
		    // Promote user to owner
		    $delta[$group][$user] = 'promoted to owner';
		    if (!$dryrun) $gapps->addOwnerToGroup($user, $group_name);
		}
		elseif(!array_key_exists($user, $group_admins) && $gapps->isOwner($user, $group_name)) {
		    // Demote user from owner
		    $delta[$group][$user] = 'demoted to ordinary member';
		    if (!$dryrun) $gapps->removeOwnerFromGroup($user, $group_name);
		}
		else {
		    // Skip the rest of this loop body
		    continue;
		}
	    }
	    catch (Exception $ex) {
		$delta[$group][$user] .= " - failed: ".$ex->getMessage();
	    }

            if (!array_key_exists($group, $delta) || !array_key_exists('MODIFICATION', $delta[$group]))
                $delta[$group]['MODIFICATION'] = 'modified';
        }
    }

    # HTMLise the $delta entries. Report the changes.
    ksort($delta);
    $log = '<ul>';
    foreach($delta as $group => $groupdelta) {
        $group = t($group);
        $modification = array_key_exists('MODIFICATION', $groupdelta)?
            $groupdelta['MODIFICATION'] : '';
        unset($groupdelta['MODIFICATION']);
        
        $log .= "<li> Group $group $modification</li>";

        if (count($groupdelta) > 0) {
            $log .= '<ul>';
            foreach($groupdelta as $user => $modification) {
                $user = t($user);

                $log .= "<li> User $user $modification</li>"; 
            }
            $log .= '</ul>';
        }
    }
    $log .= '</ul>';

    $message = t("<p>!modified Google Group configurations:</p><ul>!actions</ul>",
		 array('!actions' => $log,
		       '!modified' => $dryrun? "<i>Dry-run</i>: would have modified" : "Modified"));

    return $message;
}


